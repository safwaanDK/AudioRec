type AudioRecorderError = variant {
  RecordingDoesNotExist : text;
  Error : text;
  InvalidPayload : text;
  UserDoesNotExist : text;
};
type Recording = record {
  id : text;
  audio : vec nat8;
  userId : text;
  name : text;
  createdAt : nat64;
};
type User = record {
  id : text;
  "principal" : principal;
  username : text;
  recordingIds : vec text;
  createdAt : nat64;
};
type _AzleResult = variant { Ok : Recording; Err : AudioRecorderError };
type _AzleResult_1 = variant { Ok : User; Err : AudioRecorderError };
type _AzleResult_2 = variant { Ok : vec Recording; Err : AudioRecorderError };
type _AzleResult_3 = variant { Ok : vec User; Err : AudioRecorderError };
service : () -> {
  createRecording : (vec nat8, text, text) -> (_AzleResult);
  createUser : (text) -> (_AzleResult_1);
  deleteRecording : (text) -> (_AzleResult);
  deleteUser : (text) -> (_AzleResult_1);
  readRecordingById : (text) -> (_AzleResult) query;
  readRecordings : () -> (_AzleResult_2) query;
  readUserById : (text) -> (_AzleResult_1) query;
  readUsers : () -> (_AzleResult_3) query;
}